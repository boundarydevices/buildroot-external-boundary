From 53d74a28b51084c65910d5155bec235d7c6dd6c0 Mon Sep 17 00:00:00 2001
From: Haihua Hu <jared.hu@nxp.com>
Date: Thu, 5 Jul 2018 19:03:48 +0800
Subject: [PATCH 6/8] MMFMWK-7954 waylandsink: apply surface buffer scale for
 850D

get real display solution using wl_output interface. Compare it
with desktop size to decide which scale to use. defaultly, make
scale = 1 for compitable purpose.

upstream status: imx specific
---
 ext/wayland/meson.build |   3 +-
 ext/wayland/wldisplay.c |  49 ++++++++++++++
 ext/wayland/wldisplay.h |   4 ++
 ext/wayland/wlutils.c   | 144 ++++++++++++++++++++++++++++++++++++++++
 ext/wayland/wlutils.h   |  31 +++++++++
 ext/wayland/wlwindow.c  |  23 +++++--
 ext/wayland/wlwindow.h  |   3 +
 7 files changed, 250 insertions(+), 7 deletions(-)
 create mode 100644 ext/wayland/wlutils.c
 create mode 100644 ext/wayland/wlutils.h

diff --git a/ext/wayland/meson.build b/ext/wayland/meson.build
index 8e570c4ec..03ce1abb0 100644
--- a/ext/wayland/meson.build
+++ b/ext/wayland/meson.build
@@ -5,7 +5,8 @@ wl_sources = [
     'wldisplay.c',
     'wlwindow.c',
     'wlvideoformat.c',
-    'wllinuxdmabuf.c'
+    'wllinuxdmabuf.c',
+    'wlutils.c',
 ]
 
 libdrm_dep = dependency('libdrm', version: '>= 2.4.55', required:get_option('wayland'))
diff --git a/ext/wayland/wldisplay.c b/ext/wayland/wldisplay.c
index eac6a9d73..69764a29b 100644
--- a/ext/wayland/wldisplay.c
+++ b/ext/wayland/wldisplay.c
@@ -49,6 +49,8 @@ gst_wl_display_init (GstWlDisplay * self)
   self->dmabuf_formats = g_array_new (FALSE, FALSE, sizeof (uint32_t));
   self->wl_fd_poll = gst_poll_new (TRUE);
   self->buffers = g_hash_table_new (g_direct_hash, g_direct_equal);
+  self->width = -1;
+  self->height = -1;
   g_mutex_init (&self->buffers_mutex);
 }
 
@@ -212,6 +214,49 @@ static const struct xdg_wm_base_listener xdg_wm_base_listener = {
   handle_xdg_wm_base_ping
 };
 
+output_handle_geometry (void *data, struct wl_output *wl_output,
+    int32_t x, int32_t y,
+    int32_t physical_width, int32_t physical_height,
+    int32_t subpixel,
+    const char *make, const char *model, int32_t output_transform)
+{
+  /* Nothing to do now */
+}
+
+static void
+output_handle_mode (void *data, struct wl_output *wl_output,
+    uint32_t flags, int32_t width, int32_t height, int32_t refresh)
+{
+  GstWlDisplay *self = data;
+
+  /* we only care about the current mode */
+  if (flags & WL_OUTPUT_MODE_CURRENT) {
+    self->width = width;
+    self->height = height;
+  }
+}
+
+static void
+output_handle_done (void *data, struct wl_output *wl_output)
+{
+  /* don't bother waiting for this; there's no good reason a
+   * compositor will wait more than one roundtrip before sending
+   * these initial events. */
+}
+
+static void
+output_handle_scale (void *data, struct wl_output *wl_output, int32_t scale)
+{
+  /* Nothing to do now */
+}
+
+static const struct wl_output_listener output_listener = {
+  output_handle_geometry,
+  output_handle_mode,
+  output_handle_done,
+  output_handle_scale,
+};
+
 static void
 registry_handle_global (void *data, struct wl_registry *registry,
     uint32_t id, const char *interface, uint32_t version)
@@ -246,6 +291,10 @@ registry_handle_global (void *data, struct wl_registry *registry,
   } else if (g_strcmp0 (interface, "zwp_alpha_compositing_v1") == 0) {
     self->alpha_compositing =
         wl_registry_bind (registry, id, &zwp_alpha_compositing_v1_interface, 1);
+  } else if (g_strcmp0 (interface, "wl_output") == 0) {
+    self->output =
+        wl_registry_bind (registry, id, &wl_output_interface, MIN (version, 2));
+    wl_output_add_listener (self->output, &output_listener, self);
   }
 }
 
diff --git a/ext/wayland/wldisplay.h b/ext/wayland/wldisplay.h
index 315daa60c..c9194a756 100644
--- a/ext/wayland/wldisplay.h
+++ b/ext/wayland/wldisplay.h
@@ -59,12 +59,16 @@ struct _GstWlDisplay
   struct xdg_wm_base *xdg_wm_base;
   struct zwp_fullscreen_shell_v1 *fullscreen_shell;
   struct wl_shm *shm;
+  struct wl_output *output;
   struct wp_viewporter *viewporter;
   struct zwp_linux_dmabuf_v1 *dmabuf;
   struct zwp_alpha_compositing_v1 *alpha_compositing;
   GArray *shm_formats;
   GArray *dmabuf_formats;
 
+  /* real display resolution */
+  gint width, height;
+
   /* private */
   gboolean own_display;
   GThread *thread;
diff --git a/ext/wayland/wlutils.c b/ext/wayland/wlutils.c
new file mode 100644
index 000000000..297601edf
--- /dev/null
+++ b/ext/wayland/wlutils.c
@@ -0,0 +1,144 @@
+/* GStreamer Wayland video sink
+ *
+ * Copyright 2018 NXP
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Library General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public
+ * License along with this library; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
+ * Boston, MA 02110-1301 USA.
+ */
+
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+
+#include <stdlib.h>
+#include <stdint.h>
+#include <stdio.h>
+#include <string.h>
+#include <unistd.h>
+#include <math.h>
+#include <fcntl.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <ctype.h>
+
+#include "wlutils.h"
+
+#define WESTON_INI "/etc/xdg/weston/weston.ini"
+
+gboolean
+gst_wl_init_buffer_scale (gint display_width, gint display_height,
+    guint * scale)
+{
+  gchar path[] = WESTON_INI;
+  gchar line[512], *p, *section = NULL, *size = NULL;
+  gint fd, n, i;
+  gint desktop_width, desktop_height;
+  gboolean found_config = FALSE;
+  gboolean ret = TRUE;
+  struct stat filestat;
+  FILE *fp;
+
+  if ((fd = open (path, O_RDONLY)) == -1) {
+    return FALSE;
+  }
+
+  if (fstat (fd, &filestat) < 0 || !S_ISREG (filestat.st_mode)) {
+    close (fd);
+    return FALSE;
+  }
+
+  fp = fdopen (fd, "r");
+  if (fp == NULL) {
+    close (fd);
+    return FALSE;
+  }
+
+  while (fgets (line, sizeof line, fp)) {
+    if (found_config)
+      break;
+
+    switch (line[0]) {
+      case '#':
+      case '\n':
+        continue;
+      case '[':
+        p = strchr (&line[1], ']');
+        if (!p || p[1] != '\n') {
+          continue;
+        }
+        p[0] = '\0';
+        if (section)
+          g_free (section);
+        section = g_strdup (&line[1]);
+        continue;
+      default:
+        if (section && strcmp (section, "shell") == 0) {
+          p = strchr (line, '=');
+          if (!p || p == line) {
+            continue;
+          }
+
+          p[0] = '\0';
+          if (strcmp (&line[0], "size") == 0) {
+            p++;
+            while (isspace (*p))
+              p++;
+            i = strlen (p);
+            while (i > 0 && isspace (p[i - 1])) {
+              p[i - 1] = '\0';
+              i--;
+            }
+            if (strlen (p) > 0) {
+              if (size)
+                g_free (size);
+              size = g_strdup (p);
+              found_config = TRUE;
+            }
+          }
+        }
+        continue;
+    }
+  }
+
+  if (found_config && size) {
+    n = sscanf (size, "%dx%d\n", &desktop_width, &desktop_height);
+    if (n != 2) {
+      ret = FALSE;
+      goto out;
+    }
+  } else {
+    ret = FALSE;
+    goto out;
+  }
+
+  /* FIXME: only support buffer scale 2 and 1 */
+  if (display_width > 0 && display_height > 0) {
+    *scale = display_width / desktop_width;
+    if (*scale != 1 && *scale != 2) {
+      *scale = 1;
+    }
+  } else {
+    ret = FALSE;
+    goto out;
+  }
+
+out:
+  if (section)
+    g_free (section);
+  if (size)
+    g_free (size);
+  fclose (fp);
+  return ret;
+}
diff --git a/ext/wayland/wlutils.h b/ext/wayland/wlutils.h
new file mode 100644
index 000000000..285dcaeca
--- /dev/null
+++ b/ext/wayland/wlutils.h
@@ -0,0 +1,31 @@
+/* GStreamer Wayland video sink
+ *
+ * Copyright 2018 NXP
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Library General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public
+ * License along with this library; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
+ * Boston, MA 02110-1301 USA.
+ */
+
+#ifndef __GST_WL_UTILS_H__
+#define __GST_WL_UTILS_H__
+
+#include <gst/gst.h>
+
+G_BEGIN_DECLS
+
+gboolean gst_wl_init_buffer_scale(gint display_width, gint display_height, guint * scale);
+G_END_DECLS
+
+#endif
\ No newline at end of file
diff --git a/ext/wayland/wlwindow.c b/ext/wayland/wlwindow.c
index 4745fb324..8797c4bc9 100644
--- a/ext/wayland/wlwindow.c
+++ b/ext/wayland/wlwindow.c
@@ -27,6 +27,7 @@
 #include "wlwindow.h"
 #include "wlshmallocator.h"
 #include "wlbuffer.h"
+#include "wlutils.h"
 
 #include "gstimxcommon.h"
 
@@ -158,6 +159,7 @@ gst_wl_window_init (GstWlWindow * self)
   self->src_y = 0;
   self->src_width = -1;
   self->src_height = 0;
+  self->scale = 1;
 }
 
 static void
@@ -244,6 +246,11 @@ gst_wl_window_new_internal (GstWlDisplay * display, GMutex * render_lock)
   wl_surface_set_input_region (window->video_surface, region);
   wl_region_destroy (region);
 
+  if (!gst_wl_init_buffer_scale (display->width, display->height,
+          &window->scale)) {
+    GST_WARNING ("init buffer scale fail, fallback to scale=%d", window->scale);
+  }
+
   return window;
 }
 
@@ -343,7 +350,8 @@ gst_wl_window_new_toplevel (GstWlDisplay * display, const GstVideoInfo * info,
     /* set the initial size to be the same as the reported video size */
     gint width =
         gst_util_uint64_scale_int_round (info->width, info->par_n, info->par_d);
-    gst_wl_window_set_render_rectangle (window, 0, 0, width, info->height);
+    gst_wl_window_set_render_rectangle (window, 0, 0, width / window->scale,
+        info->height / window->scale);
   }
 
   return window;
@@ -411,10 +419,11 @@ gst_wl_window_resize_video_surface (GstWlWindow * window, gboolean commit)
   GstVideoRectangle dst = { 0, };
   GstVideoRectangle res;
 
-  wl_fixed_t src_x = wl_fixed_from_int (window->src_x);
-  wl_fixed_t src_y = wl_fixed_from_int (window->src_y);
-  wl_fixed_t src_width = wl_fixed_from_int (window->src_width);
-  wl_fixed_t src_height = wl_fixed_from_int (window->src_height);
+  wl_fixed_t src_x = wl_fixed_from_int (window->src_x / window->scale);
+  wl_fixed_t src_y = wl_fixed_from_int (window->src_y / window->scale);
+  wl_fixed_t src_width = wl_fixed_from_int (window->src_width / window->scale);
+  wl_fixed_t src_height =
+      wl_fixed_from_int (window->src_height / window->scale);
 
   /* center the video_subsurface inside area_subsurface */
   src.w = window->video_width;
@@ -425,7 +434,7 @@ gst_wl_window_resize_video_surface (GstWlWindow * window, gboolean commit)
   if (window->video_viewport) {
     gst_video_sink_center_rect (src, dst, &res, TRUE);
     wp_viewport_set_destination (window->video_viewport, res.w, res.h);
-    if (src_width != wl_fixed_from_int (-1))
+    if (src_width != wl_fixed_from_int (-1 / window->scale))
       wp_viewport_set_source (window->video_viewport,
           src_x, src_y, src_width, src_height);
   } else {
@@ -474,6 +483,7 @@ gst_wl_window_render (GstWlWindow * window, GstWlBuffer * buffer,
 
   if (G_LIKELY (buffer)) {
     gst_wl_buffer_attach (buffer, window->video_surface_wrapper);
+    wl_surface_set_buffer_scale (window->video_surface_wrapper, window->scale);
     wl_surface_damage_buffer (window->video_surface_wrapper, 0, 0, G_MAXINT32,
         G_MAXINT32);
     wl_surface_commit (window->video_surface_wrapper);
@@ -486,6 +496,7 @@ gst_wl_window_render (GstWlWindow * window, GstWlBuffer * buffer,
   } else {
     /* clear both video and parent surfaces */
     wl_surface_attach (window->video_surface_wrapper, NULL, 0, 0);
+    wl_surface_set_buffer_scale (window->video_surface_wrapper, window->scale);
     wl_surface_commit (window->video_surface_wrapper);
     wl_surface_attach (window->area_surface_wrapper, NULL, 0, 0);
     wl_surface_commit (window->area_surface_wrapper);
diff --git a/ext/wayland/wlwindow.h b/ext/wayland/wlwindow.h
index 47a1274b2..c276ed182 100644
--- a/ext/wayland/wlwindow.h
+++ b/ext/wayland/wlwindow.h
@@ -77,6 +77,9 @@ struct _GstWlWindow
 
   /* the coordinate of video crop */
   gint src_x, src_y, src_width, src_height;
+
+  /* video buffer scale */
+  guint scale;
 };
 
 struct _GstWlWindowClass
-- 
2.34.1

