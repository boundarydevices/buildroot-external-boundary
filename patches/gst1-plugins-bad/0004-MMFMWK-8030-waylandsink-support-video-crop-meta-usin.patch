From e375614dc28645e7565335e4bac06fbc1ffb4f5f Mon Sep 17 00:00:00 2001
From: Haihua Hu <jared.hu@nxp.com>
Date: Fri, 8 Jun 2018 16:52:44 +0800
Subject: [PATCH] MMFMWK-8030 waylandsink: support video crop meta using
 viewporter protocol

use API wp_viewport_set_source() to support video crop meta handle

upstream status: Pending
https://bugzilla.gnome.org/show_bug.cgi?id=796541

(cherry picked from commit 90ad8baff535d8c94f272f8d912c0802d5e5822b)

Conflicts:
	ext/wayland/wlwindow.c
	ext/wayland/wlwindow.h
---
 ext/wayland/gstwaylandsink.c       |  3 +++
 gst-libs/gst/wayland/gstwlwindow.c | 34 ++++++++++++++++++++++++++++++
 gst-libs/gst/wayland/gstwlwindow.h |  3 +++
 3 files changed, 40 insertions(+)

diff --git a/ext/wayland/gstwaylandsink.c b/ext/wayland/gstwaylandsink.c
index a600695c0..61e45b4af 100644
--- a/ext/wayland/gstwaylandsink.c
+++ b/ext/wayland/gstwaylandsink.c
@@ -696,6 +696,7 @@ gst_wayland_sink_propose_allocation (GstBaseSink * bsink, GstQuery * query)
   alloc = gst_wl_shm_allocator_get ();
   gst_query_add_allocation_param (query, alloc, NULL);
   gst_query_add_allocation_meta (query, GST_VIDEO_META_API_TYPE, NULL);
+  gst_query_add_allocation_meta (query, GST_VIDEO_CROP_META_API_TYPE, NULL);
   g_object_unref (alloc);
 
   return TRUE;
@@ -800,6 +801,8 @@ gst_wayland_sink_show_frame (GstVideoSink * vsink, GstBuffer * buffer)
   if (G_UNLIKELY (gst_wl_window_get_render_rectangle (self->window)->w == 0))
     goto no_window_size;
 
+  gst_wl_window_set_source_crop (self->window, buffer);
+
   wlbuffer = gst_buffer_get_wl_buffer (self->display, buffer);
 
   if (G_LIKELY (wlbuffer &&
diff --git a/gst-libs/gst/wayland/gstwlwindow.c b/gst-libs/gst/wayland/gstwlwindow.c
index 4aa53c369..f31003938 100644
--- a/gst-libs/gst/wayland/gstwlwindow.c
+++ b/gst-libs/gst/wayland/gstwlwindow.c
@@ -68,6 +68,9 @@ typedef struct _GstWlWindowPrivate
   /* when this is not set both the area_surface and the video_surface are not
    * visible and certain steps should be skipped */
   gboolean is_area_surface_mapped;
+
+  /* the coordinate of video crop */
+  gint src_x, src_y, src_width, src_height;
 } GstWlWindowPrivate;
 
 G_DEFINE_TYPE_WITH_CODE (GstWlWindow, gst_wl_window, G_TYPE_OBJECT,
@@ -165,6 +168,10 @@ gst_wl_window_init (GstWlWindow * self)
   priv->configured = TRUE;
   g_cond_init (&priv->configure_cond);
   g_mutex_init (&priv->configure_mutex);
+  priv->src_x = 0;
+  priv->src_y = 0;
+  priv->src_width = -1;
+  priv->src_height = 0;
 }
 
 static void
@@ -422,6 +429,11 @@ gst_wl_window_resize_video_surface (GstWlWindow * self, gboolean commit)
   GstVideoRectangle dst = { 0, };
   GstVideoRectangle res;
 
+  wl_fixed_t src_x = wl_fixed_from_int (priv->src_x);
+  wl_fixed_t src_y = wl_fixed_from_int (priv->src_y);
+  wl_fixed_t src_width = wl_fixed_from_int (priv->src_width);
+  wl_fixed_t src_height = wl_fixed_from_int (priv->src_height);
+
   switch (priv->buffer_transform) {
     case WL_OUTPUT_TRANSFORM_NORMAL:
     case WL_OUTPUT_TRANSFORM_180:
@@ -446,6 +458,9 @@ gst_wl_window_resize_video_surface (GstWlWindow * self, gboolean commit)
   if (priv->video_viewport) {
     gst_video_center_rect (&src, &dst, &res, TRUE);
     wp_viewport_set_destination (priv->video_viewport, res.w, res.h);
+    if (src_width != wl_fixed_from_int(-1))
+      wp_viewport_set_source (priv->video_viewport,
+          src_x, src_y, src_width, src_height);
   } else {
     gst_video_center_rect (&src, &dst, &res, FALSE);
   }
@@ -632,6 +647,25 @@ gst_wl_window_set_render_rectangle (GstWlWindow * self, gint x, gint y,
   gst_wl_window_update_geometry (self);
 }
 
+void
+gst_wl_window_set_source_crop (GstWlWindow * self, GstBuffer * buffer)
+{
+  GstWlWindowPrivate *priv = gst_wl_window_get_instance_private (self);
+  GstVideoCropMeta *crop = NULL;
+  crop = gst_buffer_get_video_crop_meta(buffer);
+
+  if (crop) {
+    GST_DEBUG ("buffer crop x=%d y=%d width=%d height=%d\n",
+        crop->x, crop->y, crop->width, crop->height);
+    priv->src_x = crop->x;
+    priv->src_y = crop->y;
+    priv->src_width = crop->width;
+    priv->src_height = crop->height;
+  } else {
+    priv->src_width = -1;
+  }
+}
+
 const GstVideoRectangle *
 gst_wl_window_get_render_rectangle (GstWlWindow * self)
 {
diff --git a/gst-libs/gst/wayland/gstwlwindow.h b/gst-libs/gst/wayland/gstwlwindow.h
index 06c40014f..b05fbe1af 100644
--- a/gst-libs/gst/wayland/gstwlwindow.h
+++ b/gst-libs/gst/wayland/gstwlwindow.h
@@ -65,6 +65,9 @@ GST_WL_API
 void gst_wl_window_set_render_rectangle (GstWlWindow * self, gint x, gint y,
         gint w, gint h);
 
+GST_WL_API
+void gst_wl_window_set_source_crop (GstWlWindow * self, GstBuffer * buffer);
+
 GST_WL_API
 const GstVideoRectangle *gst_wl_window_get_render_rectangle (GstWlWindow * self);
 
