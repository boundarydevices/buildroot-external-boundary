From 72059ebc0cca22e112fa07d69a453bc7e64f120e Mon Sep 17 00:00:00 2001
From: Haihua Hu <jared.hu@nxp.com>
Date: Mon, 23 Apr 2018 12:38:38 +0800
Subject: [PATCH] MMFMWK-7954 waylandsink: pass dmabuf modifier to weston

upstream status: imx specific

(cherry picked from commit 78d9555078c83b1b09bc603b9bbd05c9313d2611)

Conflicts:
	gst-libs/gst/wayland/gstwllinuxdmabuf.c
---
 ext/wayland/gstwaylandsink.c            |  8 ++++++++
 gst-libs/gst/wayland/gstwllinuxdmabuf.c | 10 +++++++++-
 2 files changed, 17 insertions(+), 1 deletion(-)

diff --git a/ext/wayland/gstwaylandsink.c b/ext/wayland/gstwaylandsink.c
index 8780d3ecf..a600695c0 100644
--- a/ext/wayland/gstwaylandsink.c
+++ b/ext/wayland/gstwaylandsink.c
@@ -47,6 +47,10 @@
 
 #include <gst/video/videooverlay.h>
 
+#include <drm_fourcc.h>
+#include <xf86drm.h>
+#include <xf86drmMode.h>
+
 /* signals */
 enum
 {
@@ -675,9 +679,13 @@ gst_wayland_sink_propose_allocation (GstBaseSink * bsink, GstQuery * query)
   GstBufferPool *pool = NULL;
   gboolean need_pool;
   GstAllocator *alloc;
+  guint64 drm_modifier;
 
   gst_query_parse_allocation (query, &caps, &need_pool);
 
+  drm_modifier = DRM_FORMAT_MOD_AMPHION_TILED;
+  gst_query_add_allocation_dmabuf_meta (query, drm_modifier);
+
   if (need_pool)
     pool = gst_wayland_create_pool (self, caps);
 
diff --git a/gst-libs/gst/wayland/gstwllinuxdmabuf.c b/gst-libs/gst/wayland/gstwllinuxdmabuf.c
index d6ee6ec37..4978f4596 100644
--- a/gst-libs/gst/wayland/gstwllinuxdmabuf.c
+++ b/gst-libs/gst/wayland/gstwllinuxdmabuf.c
@@ -24,6 +24,8 @@
 #include <config.h>
 #endif
 
+#include <gst/allocators/gstdmabufmeta.h>
+
 #include "gstwllinuxdmabuf.h"
 
 #include "linux-dmabuf-unstable-v1-client-protocol.h"
@@ -92,6 +94,8 @@ gst_wl_linux_dmabuf_construct_wl_buffer (GstBuffer * buf,
   struct zwp_linux_buffer_params_v1 *params;
   gint64 timeout;
   ConstructBufferData data;
+  GstDmabufMeta *dmabuf_meta;
+  gint64 drm_modifier = 0;
 
   g_return_val_if_fail (gst_wl_display_check_format_for_dmabuf (display,
           GST_VIDEO_INFO_FORMAT (info)), NULL);
@@ -107,6 +111,10 @@ gst_wl_linux_dmabuf_construct_wl_buffer (GstBuffer * buf,
   height = GST_VIDEO_INFO_HEIGHT (info);
   nplanes = GST_VIDEO_INFO_N_PLANES (info);
 
+  dmabuf_meta = gst_buffer_get_dmabuf_meta (buf);
+  if (dmabuf_meta)
+    drm_modifier = dmabuf_meta->drm_modifier;
+
   GST_DEBUG_OBJECT (display, "Creating wl_buffer from DMABuf of size %"
       G_GSSIZE_FORMAT " (%d x %d), format %s", info->size, width, height,
       gst_wl_dmabuf_format_to_string (format));
@@ -125,7 +133,7 @@ gst_wl_linux_dmabuf_construct_wl_buffer (GstBuffer * buf,
       GstMemory *m = gst_buffer_peek_memory (buf, mem_idx);
       gint fd = gst_dmabuf_memory_get_fd (m);
       zwp_linux_buffer_params_v1_add (params, fd, i, m->offset + skip,
-          stride, 0, 0);
+          stride, drm_modifier >> 32, drm_modifier & 0xffffffff);
     } else {
       GST_ERROR_OBJECT (mem->allocator, "memory does not seem to contain "
           "enough data for the specified format");
