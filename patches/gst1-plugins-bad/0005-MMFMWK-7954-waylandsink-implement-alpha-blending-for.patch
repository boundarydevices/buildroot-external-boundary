From 41e9800d32abc878f42487960ec84c1f90846e50 Mon Sep 17 00:00:00 2001
From: Haihua Hu <jared.hu@nxp.com>
Date: Thu, 21 Jun 2018 13:26:37 +0800
Subject: [PATCH] MMFMWK-7954 waylandsink: implement alpha blending for surface

1. implement alpha blending procotol
2. don't set area_surface to opaque
3. reset alpha when exit

upstream status: imx specific

Conflicts:
	ext/wayland/gstwaylandsink.c
	ext/wayland/meson.build
	ext/wayland/wldisplay.c
	ext/wayland/wldisplay.h
	ext/wayland/wlwindow.c
	ext/wayland/wlwindow.h
---
 ext/wayland/gstwaylandsink.c        | 31 ++++++++++--
 ext/wayland/gstwaylandsink.h        |  3 ++
 ext/wayland/meson.build             |  5 +-
 gst-libs/gst/wayland/gstwldisplay.c | 16 ++++++
 gst-libs/gst/wayland/gstwldisplay.h |  3 ++
 gst-libs/gst/wayland/gstwlwindow.c  | 78 ++++++++++++++++++++++++++---
 gst-libs/gst/wayland/gstwlwindow.h  | 12 +++++
 gst-libs/gst/wayland/meson.build    |  2 +
 8 files changed, 139 insertions(+), 11 deletions(-)

diff --git a/ext/wayland/gstwaylandsink.c b/ext/wayland/gstwaylandsink.c
index 61e45b4af..7f710c0cd 100644
--- a/ext/wayland/gstwaylandsink.c
+++ b/ext/wayland/gstwaylandsink.c
@@ -64,6 +64,7 @@ enum
   PROP_0,
   PROP_DISPLAY,
   PROP_FULLSCREEN,
+  PROP_ALPHA,
   PROP_ROTATE_METHOD,
   PROP_LAST
 };
@@ -169,6 +170,11 @@ gst_wayland_sink_class_init (GstWaylandSinkClass * klass)
           "Whether the surface should be made fullscreen ", FALSE,
           G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
 
+  g_object_class_install_property (gobject_class, PROP_ALPHA,
+      g_param_spec_float ("alpha", "Wayland surface alpha", "Wayland "
+          "surface alpha value, apply custom alpha value to wayland surface",
+          0.0f, 1.0f, 0.0f, G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
+
   /**
    * waylandsink:rotate-method:
    *
@@ -195,6 +201,7 @@ gst_wayland_sink_class_init (GstWaylandSinkClass * klass)
 static void
 gst_wayland_sink_init (GstWaylandSink * self)
 {
+  self->alpha = 0.0f;
   g_mutex_init (&self->display_lock);
   g_mutex_init (&self->render_lock);
   g_cond_init (&self->redraw_wait);
@@ -267,6 +274,8 @@ gst_wayland_sink_get_property (GObject * object,
       GST_OBJECT_LOCK (self);
       g_value_set_boolean (value, self->fullscreen);
       GST_OBJECT_UNLOCK (self);
+    case PROP_ALPHA:
+      g_value_set_float (value, self->alpha);
       break;
     case PROP_ROTATE_METHOD:
       GST_OBJECT_LOCK (self);
@@ -295,6 +304,8 @@ gst_wayland_sink_set_property (GObject * object,
       GST_OBJECT_LOCK (self);
       gst_wayland_sink_set_fullscreen (self, g_value_get_boolean (value));
       GST_OBJECT_UNLOCK (self);
+    case PROP_ALPHA:
+      self->alpha = g_value_get_float (value);
       break;
     case PROP_ROTATE_METHOD:
       gst_wayland_sink_set_rotate_method (self, g_value_get_enum (value),
@@ -408,6 +419,9 @@ gst_wayland_sink_change_state (GstElement * element, GstStateChange transition)
 {
   GstWaylandSink *self = GST_WAYLAND_SINK (element);
   GstStateChangeReturn ret = GST_STATE_CHANGE_SUCCESS;
+  struct wl_subsurface *area_surface;
+  struct wl_display *display_display;
+  gint render_rectangle_w, render_rectangle_h;
 
   switch (transition) {
     case GST_STATE_CHANGE_NULL_TO_READY:
@@ -429,6 +443,15 @@ gst_wayland_sink_change_state (GstElement * element, GstStateChange transition)
     case GST_STATE_CHANGE_PAUSED_TO_READY:
       gst_buffer_replace (&self->last_buffer, NULL);
       if (self->window) {
+        area_surface = gst_wl_window_get_area_surface (self->window);
+        render_rectangle_w = gst_wl_window_get_rectangle_w (self->window);
+        render_rectangle_h = gst_wl_window_get_rectangle_h (self->window);
+        display_display = gst_wl_display_get_display (self->display);
+        gst_wl_window_set_alpha (self->window, 1.0);
+        wl_surface_damage (area_surface, 0, 0,
+            render_rectangle_w, render_rectangle_h);
+        wl_surface_commit (area_surface);
+        wl_display_roundtrip (display_display);
         if (gst_wl_window_is_toplevel (self->window)) {
           g_clear_object (&self->window);
         } else {
@@ -464,9 +487,10 @@ gst_wayland_sink_change_state (GstElement * element, GstStateChange transition)
       g_clear_object (&self->pool);
 
       if (self->run_time > 0) {
-        g_print ("Total showed frames (%lld), playing for (%"GST_TIME_FORMAT"), fps (%.3f).\n",
-                self->frame_showed, GST_TIME_ARGS (self->run_time),
-                (gfloat)GST_SECOND * self->frame_showed / self->run_time);
+        g_print ("Total showed frames (%lld), playing for (%" GST_TIME_FORMAT
+            "), fps (%.3f).\n", self->frame_showed,
+            GST_TIME_ARGS (self->run_time),
+            (gfloat) GST_SECOND * self->frame_showed / self->run_time);
       }
       self->frame_showed = 0;
       self->run_time = 0;
@@ -792,6 +816,7 @@ gst_wayland_sink_show_frame (GstVideoSink * vsink, GstBuffer * buffer)
       gst_wl_window_set_rotate_method (self->window,
           self->current_rotate_method);
     }
+    gst_wl_window_set_alpha (self->window, self->alpha);
   }
 
   while (self->redraw_pending)
diff --git a/ext/wayland/gstwaylandsink.h b/ext/wayland/gstwaylandsink.h
index d10293537..8932df3ce 100644
--- a/ext/wayland/gstwaylandsink.h
+++ b/ext/wayland/gstwaylandsink.h
@@ -53,6 +53,9 @@ struct _GstWaylandSink
   GstBufferPool *pool;
   gboolean use_dmabuf;
 
+  /* alpha compositing */
+  gfloat alpha;
+
   gboolean video_info_changed;
   GstVideoInfo video_info;
   gboolean fullscreen;
diff --git a/ext/wayland/meson.build b/ext/wayland/meson.build
index 29c7e2feb..f0a501a2c 100644
--- a/ext/wayland/meson.build
+++ b/ext/wayland/meson.build
@@ -5,10 +5,11 @@ wl_sources = [
 if use_wayland
 
     gstwaylandsink = library('gstwaylandsink',
-        wl_sources,
+        wl_sources + protocols_files,
         c_args : gst_plugins_bad_args + ['-DGST_USE_UNSTABLE_API'],
         include_directories : [configinc],
-        dependencies : [gst_dep, gstvideo_dep, gstwayland_dep],
+        dependencies : [gst_dep, gstvideo_dep, gstwayland_dep,
+                        wl_client_dep, wl_protocol_dep, libdrm_dep],
         install : true,
         install_dir : plugins_install_dir,
     )
diff --git a/gst-libs/gst/wayland/gstwldisplay.c b/gst-libs/gst/wayland/gstwldisplay.c
index 1f83cb24b..4e4c8f00c 100644
--- a/gst-libs/gst/wayland/gstwldisplay.c
+++ b/gst-libs/gst/wayland/gstwldisplay.c
@@ -28,6 +28,7 @@
 #include "linux-dmabuf-unstable-v1-client-protocol.h"
 #include "viewporter-client-protocol.h"
 #include "xdg-shell-client-protocol.h"
+#include "alpha-compositing-unstable-v1-client-protocol.h"
 
 #include <errno.h>
 
@@ -50,6 +51,7 @@ typedef struct _GstWlDisplayPrivate
   struct wl_shm *shm;
   struct wp_viewporter *viewporter;
   struct zwp_linux_dmabuf_v1 *dmabuf;
+  struct zwp_alpha_compositing_v1 *alpha_compositing;
   GArray *shm_formats;
   GArray *dmabuf_formats;
 
@@ -142,6 +144,9 @@ gst_wl_display_finalize (GObject * gobject)
   if (priv->fullscreen_shell)
     zwp_fullscreen_shell_v1_release (priv->fullscreen_shell);
 
+  if (priv->alpha_compositing)
+    zwp_alpha_compositing_v1_destroy (priv->alpha_compositing);
+
   if (priv->compositor)
     wl_compositor_destroy (priv->compositor);
 
@@ -279,6 +284,9 @@ registry_handle_global (void *data, struct wl_registry *registry,
     priv->dmabuf =
         wl_registry_bind (registry, id, &zwp_linux_dmabuf_v1_interface, 1);
     zwp_linux_dmabuf_v1_add_listener (priv->dmabuf, &dmabuf_listener, self);
+  } else if (g_strcmp0 (interface, "zwp_alpha_compositing_v1") == 0) {
+    priv->alpha_compositing =
+        wl_registry_bind (registry, id, &zwp_alpha_compositing_v1_interface, 1);
   }
 }
 
@@ -526,6 +534,14 @@ gst_wl_display_get_viewporter (GstWlDisplay * self)
   return priv->viewporter;
 }
 
+struct zwp_alpha_compositing_v1 *
+gst_wl_display_get_alpha_compositing (GstWlDisplay * self)
+{
+  GstWlDisplayPrivate *priv = gst_wl_display_get_instance_private (self);
+
+  return priv->alpha_compositing;
+}
+
 struct wl_shm *
 gst_wl_display_get_shm (GstWlDisplay * self)
 {
diff --git a/gst-libs/gst/wayland/gstwldisplay.h b/gst-libs/gst/wayland/gstwldisplay.h
index eb07e4f87..b86260dca 100644
--- a/gst-libs/gst/wayland/gstwldisplay.h
+++ b/gst-libs/gst/wayland/gstwldisplay.h
@@ -82,6 +82,9 @@ struct zwp_fullscreen_shell_v1 *gst_wl_display_get_fullscreen_shell_v1 (GstWlDis
 GST_WL_API
 struct wp_viewporter *gst_wl_display_get_viewporter (GstWlDisplay * self);
 
+GST_WL_API
+struct zwp_alpha_compositing_v1 *gst_wl_display_get_alpha_compositing (GstWlDisplay * self);
+
 GST_WL_API
 struct wl_shm *gst_wl_display_get_shm (GstWlDisplay * self);
 
diff --git a/gst-libs/gst/wayland/gstwlwindow.c b/gst-libs/gst/wayland/gstwlwindow.c
index f31003938..0c0dd6dd5 100644
--- a/gst-libs/gst/wayland/gstwlwindow.c
+++ b/gst-libs/gst/wayland/gstwlwindow.c
@@ -25,10 +25,12 @@
 #endif
 
 #include "gstwlwindow.h"
+#include "gstimxcommon.h"
 
 #include "fullscreen-shell-unstable-v1-client-protocol.h"
 #include "viewporter-client-protocol.h"
 #include "xdg-shell-client-protocol.h"
+#include "alpha-compositing-unstable-v1-client-protocol.h"
 
 #define GST_CAT_DEFAULT gst_wl_window_debug
 GST_DEBUG_CATEGORY_STATIC (GST_CAT_DEFAULT);
@@ -54,6 +56,9 @@ typedef struct _GstWlWindowPrivate
   GCond configure_cond;
   GMutex configure_mutex;
 
+  struct wl_shell_surface *shell_surface;
+  struct zwp_blending_v1 *blend_func;
+
   /* the size and position of the area_(sub)surface */
   GstVideoRectangle render_rectangle;
 
@@ -189,6 +194,10 @@ gst_wl_window_finalize (GObject * gobject)
     wp_viewport_destroy (priv->video_viewport);
 
   wl_proxy_wrapper_destroy (priv->video_surface_wrapper);
+
+  if (priv->blend_func)
+    zwp_blending_v1_destroy (priv->blend_func);
+
   wl_subsurface_destroy (priv->video_subsurface);
   wl_surface_destroy (priv->video_surface);
 
@@ -215,6 +224,7 @@ gst_wl_window_new_internal (GstWlDisplay * display, GMutex * render_lock)
   struct wl_event_queue *event_queue;
   struct wl_region *region;
   struct wp_viewporter *viewporter;
+  struct zwp_alpha_compositing_v1 *alpha_compositing;
 
   self = g_object_new (GST_TYPE_WL_WINDOW, NULL);
   priv = gst_wl_window_get_instance_private (self);
@@ -249,6 +259,12 @@ gst_wl_window_new_internal (GstWlDisplay * display, GMutex * render_lock)
         priv->video_surface);
   }
 
+  alpha_compositing = gst_wl_display_get_alpha_compositing (display);
+  if (alpha_compositing)
+    priv->blend_func =
+        zwp_alpha_compositing_v1_get_blending (alpha_compositing,
+        priv->area_surface);
+
   /* never accept input events on the video surface */
   region = wl_compositor_create_region (compositor);
   wl_surface_set_input_region (priv->video_surface, region);
@@ -410,6 +426,39 @@ gst_wl_window_get_subsurface (GstWlWindow * self)
   return priv->area_subsurface;
 }
 
+struct wl_subsurface *
+gst_wl_window_get_area_surface (GstWlWindow * self)
+{
+  GstWlWindowPrivate *priv;
+
+  g_return_val_if_fail (self != NULL, NULL);
+
+  priv = gst_wl_window_get_instance_private (self);
+  return priv->area_surface;
+}
+
+gint
+gst_wl_window_get_rectangle_w (GstWlWindow * self)
+{
+  GstWlWindowPrivate *priv;
+
+  g_return_val_if_fail (self != NULL, NULL);
+
+  priv = gst_wl_window_get_instance_private (self);
+  return priv->render_rectangle.w;
+}
+
+gint
+gst_wl_window_get_rectangle_h (GstWlWindow * self)
+{
+  GstWlWindowPrivate *priv;
+
+  g_return_val_if_fail (self != NULL, NULL);
+
+  priv = gst_wl_window_get_instance_private (self);
+  return priv->render_rectangle.h;
+}
+
 gboolean
 gst_wl_window_is_toplevel (GstWlWindow * self)
 {
@@ -458,7 +507,7 @@ gst_wl_window_resize_video_surface (GstWlWindow * self, gboolean commit)
   if (priv->video_viewport) {
     gst_video_center_rect (&src, &dst, &res, TRUE);
     wp_viewport_set_destination (priv->video_viewport, res.w, res.h);
-    if (src_width != wl_fixed_from_int(-1))
+    if (src_width != wl_fixed_from_int (-1))
       wp_viewport_set_source (priv->video_viewport,
           src_x, src_y, src_width, src_height);
   } else {
@@ -484,12 +533,12 @@ gst_wl_window_set_opaque (GstWlWindow * self, const GstVideoInfo * info)
 
   /* Set area opaque */
   compositor = gst_wl_display_get_compositor (priv->display);
-  region = wl_compositor_create_region (compositor);
-  wl_region_add (region, 0, 0, G_MAXINT32, G_MAXINT32);
-  wl_surface_set_opaque_region (priv->area_surface, region);
-  wl_region_destroy (region);
 
   if (!GST_VIDEO_INFO_HAS_ALPHA (info)) {
+    /* for platform support overlay, video should not overlap graphic */
+    if (HAS_DCSS () || HAS_DPU ())
+      return;
+
     /* Set video opaque */
     region = wl_compositor_create_region (compositor);
     wl_region_add (region, 0, 0, G_MAXINT32, G_MAXINT32);
@@ -652,7 +701,7 @@ gst_wl_window_set_source_crop (GstWlWindow * self, GstBuffer * buffer)
 {
   GstWlWindowPrivate *priv = gst_wl_window_get_instance_private (self);
   GstVideoCropMeta *crop = NULL;
-  crop = gst_buffer_get_video_crop_meta(buffer);
+  crop = gst_buffer_get_video_crop_meta (buffer);
 
   if (crop) {
     GST_DEBUG ("buffer crop x=%d y=%d width=%d height=%d\n",
@@ -666,6 +715,23 @@ gst_wl_window_set_source_crop (GstWlWindow * self, GstBuffer * buffer)
   }
 }
 
+void
+gst_wl_window_set_alpha (GstWlWindow * self, gfloat alpha)
+{
+  GstWlWindowPrivate *priv = gst_wl_window_get_instance_private (self);
+
+  if (priv && priv->blend_func) {
+    zwp_blending_v1_set_alpha (priv->blend_func,
+        wl_fixed_from_double (alpha));
+    if (alpha < 1.0)
+      zwp_blending_v1_set_blending (priv->blend_func,
+          ZWP_BLENDING_V1_BLENDING_EQUATION_FROMSOURCE);
+    else
+      zwp_blending_v1_set_blending (priv->blend_func,
+          ZWP_BLENDING_V1_BLENDING_EQUATION_PREMULTIPLIED);
+  }
+}
+
 const GstVideoRectangle *
 gst_wl_window_get_render_rectangle (GstWlWindow * self)
 {
diff --git a/gst-libs/gst/wayland/gstwlwindow.h b/gst-libs/gst/wayland/gstwlwindow.h
index b05fbe1af..f2c5ebcf0 100644
--- a/gst-libs/gst/wayland/gstwlwindow.h
+++ b/gst-libs/gst/wayland/gstwlwindow.h
@@ -54,6 +54,15 @@ struct wl_surface *gst_wl_window_get_wl_surface (GstWlWindow * self);
 GST_WL_API
 struct wl_subsurface *gst_wl_window_get_subsurface (GstWlWindow * self);
 
+GST_WL_API
+struct wl_subsurface *gst_wl_window_get_area_surface (GstWlWindow * self);
+
+GST_WL_API
+gint gst_wl_window_get_rectangle_w (GstWlWindow * self);
+
+GST_WL_API
+gint gst_wl_window_get_rectangle_h (GstWlWindow * self);
+
 GST_WL_API
 gboolean gst_wl_window_is_toplevel (GstWlWindow * self);
 
@@ -68,6 +77,9 @@ void gst_wl_window_set_render_rectangle (GstWlWindow * self, gint x, gint y,
 GST_WL_API
 void gst_wl_window_set_source_crop (GstWlWindow * self, GstBuffer * buffer);
 
+GST_WL_API
+void gst_wl_window_set_alpha (GstWlWindow * self, gfloat alpha);
+
 GST_WL_API
 const GstVideoRectangle *gst_wl_window_get_render_rectangle (GstWlWindow * self);
 
diff --git a/gst-libs/gst/wayland/meson.build b/gst-libs/gst/wayland/meson.build
index 3aa63cb7c..0fd4d7493 100644
--- a/gst-libs/gst/wayland/meson.build
+++ b/gst-libs/gst/wayland/meson.build
@@ -41,6 +41,8 @@ if use_wayland
       ['/unstable/fullscreen-shell/fullscreen-shell-unstable-v1.xml',
        'fullscreen-shell-unstable-v1-protocol.c', 'fullscreen-shell-unstable-v1-client-protocol.h'],
       ['/stable/xdg-shell/xdg-shell.xml', 'xdg-shell-protocol.c', 'xdg-shell-client-protocol.h'],
+      ['/unstable/alpha-compositing/alpha-compositing-unstable-v1.xml',
+       'alpha-compositing-unstable-v1-protocol.c', 'alpha-compositing-unstable-v1-client-protocol.h'],
   ]
   protocols_files = []
 
