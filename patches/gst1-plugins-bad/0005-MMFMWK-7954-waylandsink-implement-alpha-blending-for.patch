From d69d881357b2c38517ef524942f2076d704320b5 Mon Sep 17 00:00:00 2001
From: Haihua Hu <jared.hu@nxp.com>
Date: Thu, 21 Jun 2018 13:26:37 +0800
Subject: [PATCH 5/8] MMFMWK-7954 waylandsink: implement alpha blending for
 surface

1. implement alpha blending procotol
2. don't set area_surface to opaque
3. reset alpha when exit

upstream status: imx specific
---
 ext/wayland/gstwaylandsink.c | 28 ++++++++++++++++++++-----
 ext/wayland/gstwaylandsink.h |  3 +++
 ext/wayland/meson.build      |  2 ++
 ext/wayland/wldisplay.c      |  9 ++++++++
 ext/wayland/wldisplay.h      |  2 ++
 ext/wayland/wlwindow.c       | 40 ++++++++++++++++++++++++++++--------
 ext/wayland/wlwindow.h       |  4 ++++
 7 files changed, 75 insertions(+), 13 deletions(-)

diff --git a/ext/wayland/gstwaylandsink.c b/ext/wayland/gstwaylandsink.c
index 09e77d4ab..2c9173c6d 100644
--- a/ext/wayland/gstwaylandsink.c
+++ b/ext/wayland/gstwaylandsink.c
@@ -67,7 +67,8 @@ enum
 {
   PROP_0,
   PROP_DISPLAY,
-  PROP_FULLSCREEN
+  PROP_FULLSCREEN,
+  PROP_ALPHA
 };
 
 GST_DEBUG_CATEGORY (gstwayland_debug);
@@ -216,12 +217,18 @@ gst_wayland_sink_class_init (GstWaylandSinkClass * klass)
           "Whether the surface should be made fullscreen ", FALSE,
           G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
 
+  g_object_class_install_property (gobject_class, PROP_ALPHA,
+      g_param_spec_float ("alpha", "Wayland surface alpha", "Wayland "
+          "surface alpha value, apply custom alpha value to wayland surface",
+          0.0f, 1.0f, 0.0f, G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
+
   gst_type_mark_as_plugin_api (GST_TYPE_WAYLAND_VIDEO, 0);
 }
 
 static void
 gst_wayland_sink_init (GstWaylandSink * sink)
 {
+  sink->alpha = 0.0f;
   g_mutex_init (&sink->display_lock);
   g_mutex_init (&sink->render_lock);
   g_cond_init (&sink->redraw_wait);
@@ -257,6 +264,8 @@ gst_wayland_sink_get_property (GObject * object,
       GST_OBJECT_LOCK (sink);
       g_value_set_boolean (value, sink->fullscreen);
       GST_OBJECT_UNLOCK (sink);
+    case PROP_ALPHA:
+      g_value_set_float (value, sink->alpha);
       break;
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
@@ -280,6 +289,8 @@ gst_wayland_sink_set_property (GObject * object,
       GST_OBJECT_LOCK (sink);
       gst_wayland_sink_set_fullscreen (sink, g_value_get_boolean (value));
       GST_OBJECT_UNLOCK (sink);
+    case PROP_ALPHA:
+      sink->alpha = g_value_get_float (value);
       break;
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
@@ -410,6 +421,11 @@ gst_wayland_sink_change_state (GstElement * element, GstStateChange transition)
     case GST_STATE_CHANGE_PAUSED_TO_READY:
       gst_buffer_replace (&sink->last_buffer, NULL);
       if (sink->window) {
+        gst_wl_window_set_alpha (sink->window, 1.0);
+        wl_surface_damage (sink->window->area_surface, 0, 0,
+            sink->window->render_rectangle.w, sink->window->render_rectangle.h);
+        wl_surface_commit (sink->window->area_surface);
+        wl_display_roundtrip (sink->display->display);
         if (gst_wl_window_is_toplevel (sink->window)) {
           g_clear_object (&sink->window);
         } else {
@@ -445,9 +461,10 @@ gst_wayland_sink_change_state (GstElement * element, GstStateChange transition)
       g_clear_object (&sink->pool);
 
       if (sink->run_time > 0) {
-        g_print ("Total showed frames (%lld), playing for (%"GST_TIME_FORMAT"), fps (%.3f).\n",
-                sink->frame_showed, GST_TIME_ARGS (sink->run_time),
-                (gfloat)GST_SECOND * sink->frame_showed / sink->run_time);
+        g_print ("Total showed frames (%lld), playing for (%" GST_TIME_FORMAT
+            "), fps (%.3f).\n", sink->frame_showed,
+            GST_TIME_ARGS (sink->run_time),
+            (gfloat) GST_SECOND * sink->frame_showed / sink->run_time);
       }
       sink->frame_showed = 0;
       sink->run_time = 0;
@@ -747,6 +764,7 @@ gst_wayland_sink_show_frame (GstVideoSink * vsink, GstBuffer * buffer)
       g_signal_connect_object (sink->window, "closed",
           G_CALLBACK (on_window_closed), sink, 0);
     }
+    gst_wl_window_set_alpha (sink->window, sink->alpha);
   }
 
   while (sink->redraw_pending)
@@ -755,7 +773,7 @@ gst_wayland_sink_show_frame (GstVideoSink * vsink, GstBuffer * buffer)
   /* make sure that the application has called set_render_rectangle() */
   if (G_UNLIKELY (sink->window->render_rectangle.w == 0))
     goto no_window_size;
-  
+
   gst_wl_window_set_source_crop (sink->window, buffer);
 
   wlbuffer = gst_buffer_get_wl_buffer (sink->display, buffer);
diff --git a/ext/wayland/gstwaylandsink.h b/ext/wayland/gstwaylandsink.h
index fea44714d..8b9c0e352 100644
--- a/ext/wayland/gstwaylandsink.h
+++ b/ext/wayland/gstwaylandsink.h
@@ -58,6 +58,9 @@ struct _GstWaylandSink
   GstBufferPool *pool;
   gboolean use_dmabuf;
 
+  /* alpha compositing */
+  gfloat alpha;
+
   gboolean video_info_changed;
   GstVideoInfo video_info;
   gboolean fullscreen;
diff --git a/ext/wayland/meson.build b/ext/wayland/meson.build
index a3ffb70d8..8e570c4ec 100644
--- a/ext/wayland/meson.build
+++ b/ext/wayland/meson.build
@@ -20,6 +20,8 @@ if use_wayland
         ['/unstable/fullscreen-shell/fullscreen-shell-unstable-v1.xml',
          'fullscreen-shell-unstable-v1-protocol.c', 'fullscreen-shell-unstable-v1-client-protocol.h'],
         ['/stable/xdg-shell/xdg-shell.xml', 'xdg-shell-protocol.c', 'xdg-shell-client-protocol.h'],
+        ['/unstable/alpha-compositing/alpha-compositing-unstable-v1.xml',
+         'alpha-compositing-unstable-v1-protocol.c', 'alpha-compositing-unstable-v1-client-protocol.h'],
     ]
     protocols_files = []
 
diff --git a/ext/wayland/wldisplay.c b/ext/wayland/wldisplay.c
index f32609199..eac6a9d73 100644
--- a/ext/wayland/wldisplay.c
+++ b/ext/wayland/wldisplay.c
@@ -102,6 +102,9 @@ gst_wl_display_finalize (GObject * gobject)
   if (self->fullscreen_shell)
     zwp_fullscreen_shell_v1_release (self->fullscreen_shell);
 
+  if (self->alpha_compositing)
+    zwp_alpha_compositing_v1_destroy (self->alpha_compositing);
+
   if (self->compositor)
     wl_compositor_destroy (self->compositor);
 
@@ -159,6 +162,9 @@ gst_wl_display_check_format_for_shm (GstWlDisplay * display,
   GArray *formats;
   guint i;
 
+  if (format == GST_VIDEO_FORMAT_NV12_10LE)
+    return TRUE;
+
   shm_fmt = gst_video_format_to_wl_shm_format (format);
   if (shm_fmt == (enum wl_shm_format) -1)
     return FALSE;
@@ -237,6 +243,9 @@ registry_handle_global (void *data, struct wl_registry *registry,
     self->dmabuf =
         wl_registry_bind (registry, id, &zwp_linux_dmabuf_v1_interface, 1);
     zwp_linux_dmabuf_v1_add_listener (self->dmabuf, &dmabuf_listener, self);
+  } else if (g_strcmp0 (interface, "zwp_alpha_compositing_v1") == 0) {
+    self->alpha_compositing =
+        wl_registry_bind (registry, id, &zwp_alpha_compositing_v1_interface, 1);
   }
 }
 
diff --git a/ext/wayland/wldisplay.h b/ext/wayland/wldisplay.h
index f2025a6a0..315daa60c 100644
--- a/ext/wayland/wldisplay.h
+++ b/ext/wayland/wldisplay.h
@@ -28,6 +28,7 @@
 #include "viewporter-client-protocol.h"
 #include "linux-dmabuf-unstable-v1-client-protocol.h"
 #include "fullscreen-shell-unstable-v1-client-protocol.h"
+#include "alpha-compositing-unstable-v1-client-protocol.h"
 
 G_BEGIN_DECLS
 
@@ -60,6 +61,7 @@ struct _GstWlDisplay
   struct wl_shm *shm;
   struct wp_viewporter *viewporter;
   struct zwp_linux_dmabuf_v1 *dmabuf;
+  struct zwp_alpha_compositing_v1 *alpha_compositing;
   GArray *shm_formats;
   GArray *dmabuf_formats;
 
diff --git a/ext/wayland/wlwindow.c b/ext/wayland/wlwindow.c
index 0a3ebf0c2..4745fb324 100644
--- a/ext/wayland/wlwindow.c
+++ b/ext/wayland/wlwindow.c
@@ -28,6 +28,8 @@
 #include "wlshmallocator.h"
 #include "wlbuffer.h"
 
+#include "gstimxcommon.h"
+
 GST_DEBUG_CATEGORY_EXTERN (gstwayland_debug);
 #define GST_CAT_DEFAULT gstwayland_debug
 
@@ -175,6 +177,10 @@ gst_wl_window_finalize (GObject * gobject)
     wp_viewport_destroy (self->video_viewport);
 
   wl_proxy_wrapper_destroy (self->video_surface_wrapper);
+
+  if (self->blend_func)
+    zwp_blending_v1_destroy (self->blend_func);
+
   wl_subsurface_destroy (self->video_subsurface);
   wl_surface_destroy (self->video_surface);
 
@@ -228,6 +234,11 @@ gst_wl_window_new_internal (GstWlDisplay * display, GMutex * render_lock)
         window->video_surface);
   }
 
+  if (display->alpha_compositing)
+    window->blend_func =
+        zwp_alpha_compositing_v1_get_blending (display->alpha_compositing,
+        window->area_surface);
+
   /* never accept input events on the video surface */
   region = wl_compositor_create_region (display->compositor);
   wl_surface_set_input_region (window->video_surface, region);
@@ -414,7 +425,7 @@ gst_wl_window_resize_video_surface (GstWlWindow * window, gboolean commit)
   if (window->video_viewport) {
     gst_video_sink_center_rect (src, dst, &res, TRUE);
     wp_viewport_set_destination (window->video_viewport, res.w, res.h);
-    if (src_width != wl_fixed_from_int(-1))
+    if (src_width != wl_fixed_from_int (-1))
       wp_viewport_set_source (window->video_viewport,
           src_x, src_y, src_width, src_height);
   } else {
@@ -434,13 +445,11 @@ gst_wl_window_set_opaque (GstWlWindow * window, const GstVideoInfo * info)
 {
   struct wl_region *region;
 
-  /* Set area opaque */
-  region = wl_compositor_create_region (window->display->compositor);
-  wl_region_add (region, 0, 0, G_MAXINT32, G_MAXINT32);
-  wl_surface_set_opaque_region (window->area_surface, region);
-  wl_region_destroy (region);
-
   if (!GST_VIDEO_INFO_HAS_ALPHA (info)) {
+    /* for platform support overlay, video should not overlap graphic */
+    if (HAS_DCSS () || HAS_DPU ())
+      return;
+
     /* Set video opaque */
     region = wl_compositor_create_region (window->display->compositor);
     wl_region_add (region, 0, 0, G_MAXINT32, G_MAXINT32);
@@ -589,7 +598,7 @@ void
 gst_wl_window_set_source_crop (GstWlWindow * window, GstBuffer * buffer)
 {
   GstVideoCropMeta *crop = NULL;
-  crop = gst_buffer_get_video_crop_meta(buffer);
+  crop = gst_buffer_get_video_crop_meta (buffer);
 
   if (crop) {
     GST_DEBUG ("buffer crop x=%d y=%d width=%d height=%d\n",
@@ -602,3 +611,18 @@ gst_wl_window_set_source_crop (GstWlWindow * window, GstBuffer * buffer)
     window->src_width = -1;
   }
 }
+
+void
+gst_wl_window_set_alpha (GstWlWindow * window, gfloat alpha)
+{
+  if (window && window->blend_func) {
+    zwp_blending_v1_set_alpha (window->blend_func,
+        wl_fixed_from_double (alpha));
+    if (alpha < 1.0)
+      zwp_blending_v1_set_blending (window->blend_func,
+          ZWP_BLENDING_V1_BLENDING_EQUATION_FROMSOURCE);
+    else
+      zwp_blending_v1_set_blending (window->blend_func,
+          ZWP_BLENDING_V1_BLENDING_EQUATION_PREMULTIPLIED);
+  }
+}
diff --git a/ext/wayland/wlwindow.h b/ext/wayland/wlwindow.h
index 8fa79c541..47a1274b2 100644
--- a/ext/wayland/wlwindow.h
+++ b/ext/wayland/wlwindow.h
@@ -58,6 +58,9 @@ struct _GstWlWindow
   gboolean configured;
   GCond configure_cond;
   GMutex configure_mutex;
+  
+  struct wl_shell_surface *shell_surface;
+  struct zwp_blending_v1 *blend_func;
 
   /* the size and position of the area_(sub)surface */
   GstVideoRectangle render_rectangle;
@@ -99,6 +102,7 @@ void gst_wl_window_render (GstWlWindow * window, GstWlBuffer * buffer,
 void gst_wl_window_set_render_rectangle (GstWlWindow * window, gint x, gint y,
         gint w, gint h);
 void gst_wl_window_set_source_crop (GstWlWindow * window, GstBuffer * buffer);
+void gst_wl_window_set_alpha (GstWlWindow * window, gfloat alpha);
 
 G_END_DECLS
 
-- 
2.34.1

